import java.util.*;

public class Main {
    static int N, M;
    static int[][] map;
    static boolean[][] visited;
    static int[] dx = {-1, 1, 0, 0}; 
    static int[] dy = {0, 0, -1, 1}; // 상하좌우

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        M = sc.nextInt();
        sc.nextLine();
        map = new int[N][M];
        visited = new boolean[N][M];

        for (int i = 0; i < N; i++) {
            String line = sc.nextLine();
            for (int j = 0; j < M; j++) {
                map[i][j] = line.charAt(j) - '0'; // 문자열을 숫자로 변환
            }
        }

        bfs(0, 0); // 시작점을 지정
        System.out.println(map[N - 1][M - 1]);
    }

    static void bfs(int x, int y) {
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{x, y});
        visited[x][y] = true;

        while (!queue.isEmpty()) {
            int[] now = queue.poll(); // 큐에서 현재 좌표를 꺼내기
            int nowX = now[0];
            int nowY = now[1]; // 현재 좌표 저장

            for (int i = 0; i < 4; i++) {
                int nextX = nowX + dx[i]; // 상, 하
                int nextY = nowY + dy[i]; // 좌, 우 방향으로 탐색

                if (nextX >= 0 && nextY >= 0 && nextX < N && nextY < M) { // N x M의 안에 있고,
                    if (!visited[nextX][nextY] && map[nextX][nextY] == 1) { // 방문하지 않았고, 1인 길이면
                        queue.offer(new int[]{nextX, nextY});
                        visited[nextX][nextY] = true; // 방문했다고 저장하고,
                        map[nextX][nextY] = map[nowX][nowY] + 1; // 거리 누적
                    }
                }
            }
        }
    }
}
