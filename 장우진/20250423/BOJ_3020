import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt(); // 동굴의 길이
        int h = sc.nextInt(); // 동굴의 높이

        int[] sf = new int[n / 2]; // 석순
        int[] ds = new int[n / 2]; // 종유석 (n은 항상 짝수이므로, 각각 n/2만큼 있음)

        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) { // 짝수번째는 항상 석순(시작이 석순이고, 교대로 나오기 때문)
                sf[i / 2] = sc.nextInt();
            } else { // 홀수번째는 종유석
                ds[i / 2] = sc.nextInt();
            }
        }
// 부딪히는 개수만 중요하므로, 석순과 종유석을 각각 정렬해 빠르게 계산 
        Arrays.sort(sf);
        Arrays.sort(ds);

        int min = n + 1; // 각각의 높이에 대해 최솟값을 구하기 위한 min. 길이가 n이기 때문에 다 부딪혀도 n+1보단 항상 작다.
        int count = 0; // 충돌 횟수

        for (int j = 1; j <= h; j++) { // 개똥벌레가 날아가는 높이(1부터 h까지)
            int start = 0; // 이분탐색을 위한 start, end, sfCrash(mid)
            int end = sf.length - 1;
            int sfCrash = sf.length; // 처음으로 충돌하는 석순의 인덱스(만약 끝까지 충돌하지 않는다면, 제일 마지막 인덱스)

            while (start <= end) { // 이분탐색
                int mid = (start + end) / 2;
                if (sf[mid] >= j) { // 석순은 아래서부터 자라기 때문에 길이(sf)가 나는 높이(j)와 같거나 크면 충돌
                    sfCrash = mid;
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            }
            int sfCnt = sf.length - sfCrash; // 석순의 충돌 갯수( sf길이가 10이고, 7번부터 충돌한다면 sf[7],sf[8],sf[9] 총 3개)

            start = 0; // 종유석(ds)를 위한 이분탐색
            end = ds.length - 1;
            int dsCrash = ds.length;

            while (start <= end) {
                int mid = (start + end) / 2;
                if (ds[mid] >= h - j + 1) { // 종유석은 위에서부터 자라기 때문에 개똥벌레 머리 위 높이 + 1(h-j+1)가 종유석길이(ds)작거나 같으면 충돌
                    dsCrash = mid;
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            }
            int dsCnt = ds.length - dsCrash; // 종유석의 충돌 갯수( ds길이가 10이고, 7번부터 충돌한다면 ds[7],ds[8],ds[9] 총 3개)

            int totalCrash = sfCnt + dsCnt;// 총 충돌 갯수

            if (totalCrash < min) {
                min = totalCrash;
                count = 1;
            } else if (totalCrash == min) {
                count++;
            }
        }

        System.out.println(min + " " + count);
    }
}
