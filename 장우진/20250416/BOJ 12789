import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        int N = sc.nextInt();
        Stack<Integer> inputStack = new Stack<>(); // 초기상태의 줄
        Stack<Integer> tempStack = new Stack<>(); // 보조 줄(대기 줄)
        
        int[] arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = sc.nextInt(); // 순서를 배열에 먼저 저장하고,
        }
        for (int i = N - 1; i >= 0; i--) {
            inputStack.push(arr[i]); // 초기상태의 줄에 역순으로 push (스택은 LIFO라서 앞 번호부터 pop 되도록)
        }

        int i = 1;
        while (i <= N) { // 나가야 할 번호 i
            if (!inputStack.isEmpty() && inputStack.peek() == i) { // 초기 스택의 맨 위 값이 지금 나가야 할 번호(i)와 같다면,
                inputStack.pop(); 
                i++; // 꺼내고 나가야하는 번호 증가
            } else if (!tempStack.isEmpty() && tempStack.peek() == i) { // 보조 스택에서도 나갈 수 있다면 (맨 위가 i)
                tempStack.pop(); // 꺼내고 나가야하는 번호 증가
                i++;
            } else if (!inputStack.isEmpty()) { // 두 스택에 모두 나가야하는 값이 없다면,
                tempStack.push(inputStack.pop()); // 초기 스택의 맨 위 값을 보조 스택으로 보냄
            } else {
                System.out.println("Sad"); // 위에 모든 경우에 해당하지 않으면 실패이므로 sad 출력
                return;
            }
        }

        System.out.println("Nice"); // N까지 성공적으로 돌았다면, Nice 출력
    }
}
